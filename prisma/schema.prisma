// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgresql://dummy:dummy@dummy/dummy" // URL Fict√≠cia para evitar erros de build
}

model Product {
  id        String   @id @default(cuid())
  name      String
  brand     String?
  price     Decimal  @db.Decimal(10, 2)
  stock     Int      @default(0)
  category  String
  note      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  productId String
  quantity  Int      @default(1)
  sessionId String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id            String      @id @default(cuid())
  customerName  String
  email         String
  address       String
  total         Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  paymentMethod String?
  paymentId     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  items        OrderItem[]
  appointments Appointment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Appointment {
  id           String            @id @default(cuid())
  customerName String
  email        String
  phone        String?
  service      String
  date         DateTime
  duration     Int               @default(60) // minutes
  status       AppointmentStatus @default(SCHEDULED)
  notes        String?
  orderId      String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  order Order? @relation(fields: [orderId], references: [id])

  @@map("appointments")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
